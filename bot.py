import asyncio
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, CommandObject, Command
from config import BOT_TOKEN
import database as db
import os
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
with open("tasks.json", "r", encoding="utf-8") as f:
    TASKS = json.load(f)

user_active_task = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

@dp.message(CommandStart())
async def start_handler(message: types.Message, command: CommandObject):
    await db.add_user(message.from_user.id, message.from_user.username or "")
    task_arg = command.args  # –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ /start=

    if task_arg and task_arg in TASKS:
        task = TASKS[task_arg]
        user_active_task[message.from_user.id] = task_arg
        await message.answer(
            f"üéØ <b>{task['title']}</b>\n\n{task['description']}",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–≤–µ—Å—Ç –ù–ì–ü–£.\n"
            "–°–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥—ã –≤ –ª–æ–∫–∞—Ü–∏—è—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è üó∫Ô∏è"
        )


@dp.message(F.photo)
async def photo_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown_user"

    if user_id not in user_active_task:
        await message.answer("üìç –°–Ω–∞—á–∞–ª–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å –∑–∞–¥–∞–Ω–∏–µ–º!")
        return

    task_id = user_active_task[user_id]
    done = await db.check_task_done(user_id, task_id)
    if done:
        await message.answer("‚úÖ –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ò—â–∏ —Å–ª–µ–¥—É—é—â–µ–µ!")
        return

    # üì∏ –ü–æ–ª—É—á–∞–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–Ω–∞–∏–±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ) —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_folder = f"photos/{user_id}"
    os.makedirs(user_folder, exist_ok=True)

    # –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –∑–∞–¥–∞–Ω–∏–µ–º
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    photo_path = f"{user_folder}/{task_id}_{timestamp}.jpg"

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await bot.download_file(file.file_path, photo_path)

    # –û—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    await db.mark_task_done(user_id, task_id)
    del user_active_task[user_id]

    await message.answer("üéâ –û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –∑–∞–¥–∞–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = await db.get_user_progress(user_id)
    total_tasks = len(TASKS)
    completed = sum(1 for t in TASKS if progress.get(t))
    percent = int((completed / total_tasks) * 100)
    filled_blocks = int(percent / 10)
    empty_blocks = 10 - filled_blocks
    progress_bar = "üüß" * filled_blocks + "‚¨ú" * empty_blocks

    lines = []
    for t_id, task_data in TASKS.items():
        done = progress.get(t_id, False)
        status = "‚úÖ" if done else "‚ùå"
        lines.append(f"{status} {task_data['title']}")

    response = (
        f"üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
        f"{progress_bar}  {percent}%\n\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{completed}</b> –∏–∑ <b>{total_tasks}</b>\n\n"
        + "\n".join(lines)
    )

    await message.answer(response, parse_mode="HTML")
    await message.answer("üöÄ –ò—â–∏ —Å–ª–µ–¥—É—é—â–∏–π QR-–∫–æ–¥, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–≤–µ—Å—Ç!")

    print(f"üì∑ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {photo_path}")

@dp.message(Command("progress"))
async def progress_handler(message: types.Message):
    user_id = message.from_user.id
    progress = await db.get_user_progress(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –Ω–∏—á–µ–≥–æ
    if not progress:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤—ã–π QR-–∫–æ–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return

    # –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    total_tasks = len(TASKS)
    completed = sum(1 for t in TASKS if progress.get(t))
    percent = int((completed / total_tasks) * 100)

    # –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    filled_blocks = int(percent / 10)
    empty_blocks = 10 - filled_blocks
    progress_bar = "üüß" * filled_blocks + "‚¨ú" * empty_blocks

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
    lines = []
    for task_id, task_data in TASKS.items():
        done = progress.get(task_id, False)
        status = "‚úÖ" if done else "‚ùå"
        lines.append(f"{status} {task_data['title']}")

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = (
        f"üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
        f"{progress_bar}  {percent}%\n\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{completed}</b> –∏–∑ <b>{total_tasks}</b>\n\n"
        + "\n".join(lines)
    )

    await message.answer(response, parse_mode="HTML")

@dp.message(Command("cancel"))
async def cancel_task_handler(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_active_task:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    task_id = user_active_task[user_id]

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    done = await db.check_task_done(user_id, task_id)

    if done:
        await db.unmark_task_done(user_id, task_id)
        await message.answer(
            "‚ôªÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–ó–∞–¥–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ."
        )
    else:
        await message.answer("üîÑ –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    del user_active_task[user_id]

    # –ü–æ–∫–∞–∂–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = await db.get_user_progress(user_id)
    total_tasks = len(TASKS)
    completed = sum(1 for t in TASKS if progress.get(t))
    percent = int((completed / total_tasks) * 100)

    filled_blocks = int(percent / 10)
    empty_blocks = 10 - filled_blocks
    progress_bar = "üüß" * filled_blocks + "‚¨ú" * empty_blocks

    lines = []
    for t_id, task_data in TASKS.items():
        done = progress.get(t_id, False)
        status = "‚úÖ" if done else "‚ùå"
        lines.append(f"{status} {task_data['title']}")

    response = (
        f"üìä <b>–í–∞—à –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
        f"{progress_bar}  {percent}%\n\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{completed}</b> –∏–∑ <b>{total_tasks}</b>\n\n"
        + "\n".join(lines)
    )

    await message.answer(response, parse_mode="HTML")



async def main():
    await db.init_db()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
